"""
You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note that we have only one quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively.
Also given an integer W which represents knapsack capacity,
find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W.
You cannot break an item, either pick the complete item or donâ€™t pick it (0-1 property).
"""

def knapsack(values, weight, W):
    dp = [[0] * (W + 1) for _ in range(len(values) + 1)]
    for i in range(1, len(values) + 1):
        for w in range(1, W + 1):
            if weight[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight[i - 1]] + values[i - 1])
            else:
                dp[i][w] = dp[i - 1][w]
    return dp[-1][-1]

if __name__ == '__main__':
    values = [1, 2, 3]
    weight = [4, 5, 1]
    W = 4
    print(knapsack(values, weight, W))
    # 3

    values = [60, 100, 120]
    weight = [10, 20, 30]
    W = 50
    print(knapsack(values, weight, W))
    # 220

